{"version":3,"sources":["enums/app/path.ts","enums/app/dataStatus.ts","enums/http/httpMethod.ts","enums/file/contentType.ts","enums/notification/notification-message.enum.ts","enums/notification/notification-title.enum.ts","services/http/common/enums/customExceptionName.ts","services/http/common/enums/httpHeader.ts","services/http/common/enums/httpCode.ts","components/Toaster.tsx","store/employees/common.ts","services/http/common/constants/index.ts","services/http/exceptions/httpError.ts","services/http/index.ts","services/http/common/helpers/getStringifiedQuery.ts","services/storage/index.ts","services/employeesApi/index.ts","services/notification/index.ts","services/index.ts","store/employees/actions.ts","components/Loader.tsx","common/constants/array.ts","components/EmployeesList.tsx","hooks/useScroll.ts","components/EmployeeCard.tsx","components/EmployeesBirthdayList.tsx","components/EmployeeBirthdayCard.tsx","hooks/useAppSelector.ts","pages/Employees.tsx","App.tsx","reportWebVitals.ts","store/employees/index.ts","store/rootReducer.ts","store/index.ts","index.tsx"],"names":["Path","DataStatus","HttpMethod","ContentType","NotificationMessage","NotificationTitle","CustomExceptionName","HttpHeader","HttpCode","Toaster","timeOut","isNewestOnTop","isDuplicatesPrevented","hasProgressBar","isClosingOnClick","position","transitionIn","transitionOut","className","newestOnTop","preventDuplicates","progressBar","closeOnToastrClick","ActionType","DEFAULT_MESSAGE","HttpError","status","INTERNAL_SERVER_ERROR","message","name","HTTP_ERROR","Error","Http","url","options","method","GET","contentType","query","headers","this","getHeaders","fetch","getUrl","then","checkStatus","res","parseJSON","catch","throwError","stringify","getStringifiedQuery","Headers","append","CONTENT_TYPE","response","ok","json","statusText","parsedException","err","Storage","storage","key","getItem","value","setItem","removeItem","clear","EmployeesApi","http","load","API_EMPLOYEES_ORIGIN_URL","Notification","toastr","title","success","info","warning","error","localStorage","employeesApi","notification","getEmployees","createAsyncThunk","EMPLOYEES_GET","_args","a","extra","employees","map","employee","isActive","Boolean","id","selectEmployee","EMPLOYEE_SELECT","employeeId","getState","isEmployeeActive","SUCCESS","EMPLOYEE_SELECTION_DELETED","EMPLOYEE_SELECTED","Loader","alphabet","month","EmployeesList","useState","isShowHeader","setIsShowHeader","dispatch","useDispatch","scrollRef","elRef","useRef","useEffect","el","current","onWheel","e","deltaY","preventDefault","scrollTo","left","scrollLeft","behavior","addEventListener","removeEventListener","useHorizontalScroll","handleEmployeeSelect","onScroll","event","currentTarget","scrollTop","ref","letter","isNameExist","firstName","toUpperCase","onEmployeeSelect","EmployeeCard","lastName","type","checked","onChange","EmployeesBirthdayList","monthesFromStartOfYearTillNow","activeEmployees","filter","sort","b","nameA","toLowerCase","nameB","monthesFromNowToEndOfYear","slice","Date","getMonth","monthes","concat","isActiveEmployeesExist","length","dob","toLocaleString","EmployeeBirthdayCard","year","date","day","Number","useAppSelector","useSelector","EmployeesPage","dataStatus","PENDING","App","Employees","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","IDLE","reducer","createSlice","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","FULFILLED","payload","rejected","REJECTED","rootReducer","combineReducers","employeesReducer","toastrReducer","extraArgument","store","configureStore","middleware","getDefaultMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a34fdc46.chunk.js","sourcesContent":["enum Path {\n  API_EMPLOYEES_ORIGIN_URL = 'https://yalantis-react-school-api.yalantis.com/api/task0/users',\n}\n\nexport { Path };\n","enum DataStatus {\n  IDLE = 'idle',\n  PENDING = 'pending',\n  FULFILLED = 'fulfilled',\n  REJECTED = 'rejected',\n}\n\nexport { DataStatus };\n","enum HttpMethod {\n  GET = 'GET',\n  POST = 'POST',\n  PUT = 'PUT',\n  DELETE = 'DELETE',\n}\n\nexport { HttpMethod };\n","enum ContentType {\n  JSON = 'application/json',\n}\n\nexport { ContentType };\n","enum NotificationMessage {\n  EMPLOYEE_SELECTED = 'Employee has been selected successfully 🎉',\n  EMPLOYEE_SELECTION_DELETED = 'Selection was removed successfully 🎉',\n}\n\nexport { NotificationMessage };\n","enum NotificationTitle {\n  SUCCESS = 'Success!',\n  ERROR = 'Error',\n}\n\nexport { NotificationTitle };\n","enum CustomExceptionName {\n  HTTP_ERROR = 'httpError',\n}\n\nexport { CustomExceptionName };\n","enum HttpHeader {\n  CONTENT_TYPE = 'content-type',\n  AUTHORIZATION = 'authorization',\n}\n\nexport { HttpHeader };\n","enum HttpCode {\n  OK = 200,\n  CREATED = 201,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  NOT_FOUND = 404,\n  INTERNAL_SERVER_ERROR = 500,\n}\n\nexport { HttpCode };\n","import React from 'react';\nimport ReduxToastr, { positionType, transitionInType, transitionOutType } from 'react-redux-toastr';\nimport 'react-redux-toastr/lib/css/react-redux-toastr.min.css';\n\ntype Props = {\n  timeOut?: number;\n  isNewestOnTop?: boolean;\n  isDuplicatesPrevented?: boolean;\n  hasProgressBar?: boolean;\n  isClosingOnClick?: boolean;\n  position?: positionType;\n  transitionIn?: transitionInType;\n  transitionOut?: transitionOutType;\n  className?: string;\n};\n\nconst Toaster: React.FC<Props> = ({\n  timeOut = 4000,\n  isNewestOnTop = true,\n  isDuplicatesPrevented = true,\n  hasProgressBar = true,\n  isClosingOnClick = true,\n  position = 'top-right',\n  transitionIn = 'fadeIn',\n  transitionOut = 'fadeOut',\n  className,\n}) => (\n  <ReduxToastr\n    timeOut={timeOut}\n    newestOnTop={isNewestOnTop}\n    preventDuplicates={isDuplicatesPrevented}\n    progressBar={hasProgressBar}\n    closeOnToastrClick={isClosingOnClick}\n    position={position}\n    transitionIn={transitionIn}\n    transitionOut={transitionOut}\n    className={className}\n  />\n);\n\nexport default Toaster;\n","enum ActionType {\n  EMPLOYEES_GET = 'employees/get',\n  EMPLOYEE_SELECT = 'employee/select',\n}\n\nexport { ActionType };\n","const DEFAULT_MESSAGE = 'Network Error';\n\nexport { DEFAULT_MESSAGE };\n","import { DEFAULT_MESSAGE } from '../common/constants';\nimport { CustomExceptionName, HttpCode } from '../common/enums';\n\nclass HttpError extends Error {\n  status: HttpCode;\n\n  constructor({ status = HttpCode.INTERNAL_SERVER_ERROR, message = DEFAULT_MESSAGE } = {}) {\n    super(message);\n    this.status = status;\n    this.name = CustomExceptionName.HTTP_ERROR;\n  }\n}\n\nexport { HttpError };\n","import { HttpMethod } from '../../enums';\nimport { GetHeadersProps, HttpOptions } from './common/types';\nimport { HttpHeader } from './common/enums';\nimport { HttpError } from './exceptions';\nimport { getStringifiedQuery } from './common/helpers';\n\nclass Http {\n  load<T = unknown>(url: string, options: Partial<HttpOptions> = {}): Promise<T> {\n    const { method = HttpMethod.GET, contentType, query } = options;\n    const headers = this.getHeaders({\n      contentType,\n    });\n\n    return fetch(this.getUrl(url, query), {\n      method,\n      headers,\n    })\n      .then(this.checkStatus)\n      .then((res) => this.parseJSON<T>(res))\n      .catch(this.throwError);\n  }\n\n  private getUrl(url: string, query?: Record<string, unknown>): string {\n    return `${url}${query ? `?${getStringifiedQuery(query)}` : ''}`;\n  }\n\n  private getHeaders({ contentType }: GetHeadersProps): Headers {\n    const headers = new Headers();\n\n    if (contentType) {\n      headers.append(HttpHeader.CONTENT_TYPE, contentType);\n    }\n\n    return headers;\n  }\n\n  private async checkStatus(response: Response): Promise<Response> {\n    if (!response.ok) {\n      const parsedException = await response.json().catch(() => ({\n        message: response.statusText,\n      }));\n\n      throw new HttpError({\n        status: response.status,\n        message: parsedException?.message,\n      });\n    }\n    return response;\n  }\n\n  private parseJSON<T>(response: Response): Promise<T> {\n    return response.json();\n  }\n\n  private throwError(err: Error): never {\n    throw err;\n  }\n}\n\nexport { Http };\n","import { stringify } from 'query-string';\n\nconst getStringifiedQuery = (query: Record<string, unknown>): string => {\n  return stringify(query);\n};\n\nexport { getStringifiedQuery };\n","type Constructor = {\n  storage: globalThis.Storage;\n};\n\nclass Storage {\n  #storage: globalThis.Storage;\n  constructor({ storage }: Constructor) {\n    this.#storage = storage;\n  }\n\n  public getItem(key: string): string | null {\n    return this.#storage.getItem(key);\n  }\n\n  public setItem(key: string, value: string): void {\n    return this.#storage.setItem(key, value);\n  }\n\n  public removeItem(key: string): void {\n    return this.#storage.removeItem(key);\n  }\n\n  public clear(): void {\n    return this.#storage.clear();\n  }\n}\n\nexport { Storage };\n","import { Path, HttpMethod } from '../../enums';\nimport { Employee } from '../../common/types';\nimport { Http } from '../http';\n\ntype Constructor = {\n  http: Http;\n};\n\nclass EmployeesApi {\n  #http: Http;\n\n  constructor({ http }: Constructor) {\n    this.#http = http;\n  }\n\n  public getEmployees(): Promise<Employee[]> {\n    return this.#http.load(`${Path.API_EMPLOYEES_ORIGIN_URL}`, { method: HttpMethod.GET });\n  }\n}\n\nexport { EmployeesApi };\n","import { BasicToastrOptions, toastr, ToastrEmitter } from 'react-redux-toastr';\n\nclass Notification {\n  #instance: ToastrEmitter;\n\n  constructor() {\n    this.#instance = toastr;\n  }\n\n  success(title: string, message: string, options?: BasicToastrOptions): void {\n    this.#instance.success(title, message, options);\n  }\n\n  info(title: string, message: string, options?: BasicToastrOptions): void {\n    this.#instance.info(title, message, options);\n  }\n\n  warning(title: string, message: string, options?: BasicToastrOptions): void {\n    this.#instance.warning(title, message, options);\n  }\n\n  error(title: string, message: string, options?: BasicToastrOptions): void {\n    this.#instance.error(title, message, options);\n  }\n}\n\nexport { Notification };\n","import { Http } from './http';\nimport { Storage } from './storage';\nimport { EmployeesApi } from './employeesApi';\nimport { Notification } from './notification';\n\nconst storage = new Storage({ storage: localStorage });\n\nconst http = new Http();\n\nconst employeesApi = new EmployeesApi({ http });\n\nconst notification = new Notification();\n\nexport { storage, employeesApi, notification };\n","import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { employeesApi } from '../../services';\nimport { Employee, AsyncThunkConfig } from '../../common/types';\nimport { ActionType } from './common';\nimport { NotificationTitle, NotificationMessage } from '../../enums';\n\nconst getEmployees = createAsyncThunk<Employee[], undefined, AsyncThunkConfig>(\n  ActionType.EMPLOYEES_GET,\n  async (_args, { extra }) => {\n    const { storage } = extra;\n    const employees = await employeesApi.getEmployees();\n    return employees.map((employee) => {\n      return {\n        ...employee,\n        isActive: Boolean(storage.getItem(employee.id)),\n      };\n    });\n  }\n);\n\nconst selectEmployee = createAsyncThunk<Employee[], string, AsyncThunkConfig>(\n  ActionType.EMPLOYEE_SELECT,\n  async (employeeId, { extra, getState }) => {\n    const { storage, notification } = extra;\n    const { employees } = getState();\n    const isEmployeeActive = storage.getItem(employeeId);\n    if (isEmployeeActive) {\n      storage.removeItem(employeeId);\n      notification.warning(\n        NotificationTitle.SUCCESS,\n        NotificationMessage.EMPLOYEE_SELECTION_DELETED\n      );\n    } else {\n      storage.setItem(employeeId, 'value');\n      notification.success(NotificationTitle.SUCCESS, NotificationMessage.EMPLOYEE_SELECTED);\n    }\n    return employees.employees.map((employee) => {\n      if (employee.id !== employeeId) return employee;\n      return {\n        ...employee,\n        isActive: Boolean(!isEmployeeActive),\n      };\n    });\n  }\n);\n\nexport { getEmployees, selectEmployee };\n","import React from 'react';\nimport './styles.css';\n\nconst Loader: React.FC = () => (\n  <div className={'spinnerContainer'}>\n    <div className={'spinner'}></div>\n  </div>\n);\n\nexport default Loader;\n","const alphabet = [\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n];\n\nconst month = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nexport { alphabet, month };\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { EmployeeCard } from '.';\nimport { alphabet } from '../common/constants/array';\nimport { Employee } from '../common/types';\nimport { useHorizontalScroll } from '../hooks/useScroll';\nimport { selectEmployee } from '../store/actions';\nimport './styles.css';\n\ntype Props = {\n  employees: Employee[];\n};\n\nconst EmployeesList: React.FC<Props> = ({ employees }) => {\n  const [isShowHeader, setIsShowHeader] = useState(false);\n  const dispatch = useDispatch();\n  const scrollRef = useHorizontalScroll();\n  const handleEmployeeSelect = (employeeId: string): void => {\n    dispatch(selectEmployee(employeeId));\n  };\n\n  const handleScroll = (event: React.UIEvent<HTMLElement>) => {\n    const { scrollTop } = event.currentTarget;\n    if (scrollTop > 80) {\n      setIsShowHeader(true);\n    } else {\n      setIsShowHeader(false);\n      return;\n    }\n  };\n  return (\n    <>\n      <div className={'employees'} onScroll={handleScroll} ref={scrollRef}>\n        <h2 className={isShowHeader ? 'employeesHeader opacityNull' : 'employeesHeader'}>\n          Employees\n        </h2>\n        <div className={'listWrapper'}>\n          {alphabet.map((letter) => {\n            let isNameExist = false;\n            return (\n              <div className={'letterColumn'} key={letter}>\n                <h3>{letter}</h3>\n                {employees.map((employee) => {\n                  if (letter === employee.firstName[0].toUpperCase()) {\n                    isNameExist = true;\n                    return (\n                      <EmployeeCard\n                        employee={employee}\n                        key={employee.id}\n                        onEmployeeSelect={handleEmployeeSelect}\n                      />\n                    );\n                  }\n                })}\n                {!Boolean(isNameExist) && (\n                  <span className={'employeeCard'}>\n                    <b>No Employees</b>\n                  </span>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default EmployeesList;\n","import { useRef, useEffect, RefObject } from 'react';\n\nconst useHorizontalScroll = (): RefObject<HTMLDivElement> => {\n  const elRef = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    const el = elRef.current;\n    if (el) {\n      const onWheel = (e: WheelEvent) => {\n        if (e.deltaY == 0) return;\n        e.preventDefault();\n        el.scrollTo({\n          left: el.scrollLeft + e.deltaY,\n          behavior: 'smooth',\n        });\n      };\n      el.addEventListener('wheel', onWheel);\n      return () => el.removeEventListener('wheel', onWheel);\n    }\n  }, []);\n  return elRef;\n};\n\nexport { useHorizontalScroll };\n","import React from 'react';\nimport { Employee } from '../common/types';\nimport './styles.css';\n\ntype Props = {\n  employee: Employee;\n  onEmployeeSelect: (employeeId: string) => void;\n};\n\nconst EmployeeCard: React.FC<Props> = ({ employee, onEmployeeSelect }) => {\n  return (\n    <div className={'employeeCard'}>\n      <div className={employee.isActive ? 'blue employeeName' : 'employeeName'}>\n        {employee.firstName} {employee.lastName}\n      </div>\n      <form className={'radioWrapper'}>\n        <label>\n          <input\n            type=\"radio\"\n            checked={!employee.isActive}\n            onChange={() => onEmployeeSelect(employee.id)}\n          />\n          not active\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            checked={employee.isActive}\n            onChange={() => onEmployeeSelect(employee.id)}\n          />\n          active\n        </label>\n      </form>\n    </div>\n  );\n};\n\nexport default EmployeeCard;\n","import React from 'react';\nimport { EmployeeBirthdayCard } from '.';\nimport { month } from '../common/constants/array';\nimport { Employee } from '../common/types';\nimport './styles.css';\n\ntype Props = {\n  employees: Employee[];\n};\n\nconst EmployeesBirthdayList: React.FC<Props> = ({ employees }) => {\n  const activeEmployees = employees\n    .filter((employee) => employee.isActive)\n    // .sort((a, b) => new Date(a.dob).getTime() - new Date(b.dob).getTime());\n    .sort((a, b) => {\n      const nameA = a.lastName.toLowerCase();\n      const nameB = b.lastName.toLowerCase();\n      if (nameA < nameB) return -1;\n      if (nameA > nameB) return 1;\n      return 0;\n    });\n  let monthesFromNowToEndOfYear: string[] = [];\n  let monthesFromStartOfYearTillNow: string[] = [];\n  monthesFromNowToEndOfYear = month.slice(new Date().getMonth());\n  monthesFromStartOfYearTillNow = month.slice(0, new Date().getMonth());\n  const monthes = monthesFromNowToEndOfYear.concat(monthesFromStartOfYearTillNow);\n  const isActiveEmployeesExist = Boolean(activeEmployees.length);\n  return (\n    <div className={'employeesBirthday'}>\n      <h2>Employees birthday</h2>\n      <div>\n        <div className={'separator'}></div>\n        {isActiveEmployeesExist ? (\n          monthes.map((month) => {\n            let isNameExist = false;\n            return (\n              <div className={'monthCard'} key={month}>\n                <div>{month}</div>\n                {activeEmployees.map((employee) => {\n                  if (new Date(employee.dob).toLocaleString('en-EN', { month: 'long' }) === month) {\n                    isNameExist = true;\n                    return <EmployeeBirthdayCard key={employee.id} employee={employee} />;\n                  }\n                })}\n                {!Boolean(isNameExist) && (\n                  <div className={'employeeBirthdayCard'}>No Employees</div>\n                )}\n              </div>\n            );\n          })\n        ) : (\n          <div>Employees List is empty</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeesBirthdayList;\n","import React from 'react';\nimport { Employee } from '../common/types';\nimport './styles.css';\n\ntype Props = {\n  employee: Employee;\n};\n\nconst EmployeeBirthdayCard: React.FC<Props> = ({ employee }) => {\n  const month = new Date(employee.dob).toLocaleString('en-EN', { month: 'long' });\n  const year = new Date(employee.dob).toLocaleString('en-EN', { year: 'numeric' });\n  let date = new Date(employee.dob).toLocaleString('en-EN', { day: 'numeric' });\n  if (Number(date) < 10) {\n    date = '0' + date;\n  }\n  return (\n    <div className={'employeeBirthdayCard'}>\n      <div>\n        {employee.lastName} {employee.firstName} - {date} {month}, {year} year\n      </div>\n    </div>\n  );\n};\n\nexport default EmployeeBirthdayCard;\n","import { useSelector, TypedUseSelectorHook } from 'react-redux';\nimport { RootState } from '../common/types/app';\n\nconst useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport { useAppSelector };\n","import React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getEmployees } from '../store/actions';\nimport { Loader, EmployeesList, EmployeesBirthdayList } from '../components';\nimport { useAppSelector } from '../hooks';\nimport { DataStatus } from '../enums';\n\nconst EmployeesPage: React.FC = () => {\n  const { employees, dataStatus } = useAppSelector(({ employees }) => ({\n    employees: employees.employees,\n    dataStatus: employees.dataStatus,\n  }));\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getEmployees());\n  }, [dispatch]);\n\n  if (dataStatus === DataStatus.PENDING) {\n    return <Loader />;\n  }\n\n  return (\n    <div className={'employeesPage'}>\n      <EmployeesList employees={employees} />\n      <EmployeesBirthdayList employees={employees} />\n    </div>\n  );\n};\n\nexport default EmployeesPage;\n","import React from 'react';\nimport './App.css';\nimport Toaster from './components/Toaster';\nimport EmployeesPage from './pages/Employees';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <EmployeesPage />\n      <Toaster />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { DataStatus } from '../../enums';\nimport { Employee } from '../../common/types';\nimport { getEmployees, selectEmployee } from './actions';\n\ntype State = {\n  dataStatus: DataStatus;\n  employees: Employee[] | [];\n};\n\nconst initialState: State = {\n  dataStatus: DataStatus.IDLE,\n  employees: [],\n};\n\nconst employeesSlice = createSlice({\n  name: 'employees',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getEmployees.pending, (state) => {\n      state.dataStatus = DataStatus.PENDING;\n    });\n    builder.addCase(getEmployees.fulfilled, (state, action) => {\n      state.dataStatus = DataStatus.FULFILLED;\n      state.employees = action.payload;\n    });\n    builder.addCase(getEmployees.rejected, (state) => {\n      state.dataStatus = DataStatus.REJECTED;\n    });\n    builder.addCase(selectEmployee.fulfilled, (state, action) => {\n      state.employees = action.payload;\n    });\n  },\n});\n\nconst reducer = employeesSlice.reducer;\n\nexport { reducer };\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { reducer as toastrReducer } from 'react-redux-toastr';\nimport { reducer as employeesReducer } from './employees';\n\nconst rootReducer = combineReducers({\n  employees: employeesReducer,\n  toastr: toastrReducer,\n});\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\nimport { employeesApi, storage, notification } from '../services';\n\nconst extraArgument = {\n  employeesApi,\n  storage,\n  notification,\n};\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => {\n    return getDefaultMiddleware({\n      thunk: {\n        extraArgument,\n      },\n    });\n  },\n});\n\nexport { extraArgument, store };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}